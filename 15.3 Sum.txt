class Solution {
    // Your quick_sort + partition methods
    public static int[] quick_sort(int[] array, int p, int r) {
        if (p < r) {
            int q = partition(array, p, r);
            quick_sort(array, p, q - 1);
            quick_sort(array, q + 1, r);
        }
        return array;
    }

    public static int partition(int[] array, int p, int r) {
        int pivot = array[r];
        int i = p - 1;
        for (int j = p; j < r; j++) {
            if (array[j] <= pivot) {
                i++;
                // swap array[i] and array[j]
                int tmp = array[i];
                array[i] = array[j];
                array[j] = tmp;
            }
        }
        // swap array[i+1] and array[r]
        int tmp = array[i + 1];
        array[i + 1] = array[r];
        array[r] = tmp;
        return i + 1;
    }

    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();

        // 1) Sort the array in-place
        quick_sort(nums, 0, nums.length - 1);
         // 2) For each position i, do 2-sum with target = -nums[i]
        for (int i = 0; i < nums.length - 2; i++) {
            // Skip duplicates for the first element
            if (i > 0 && nums[i] == nums[i - 1]) continue;

            int target = -nums[i];
            int left = i + 1, right = nums.length - 1;

            while (left < right) {
                int sum = nums[left] + nums[right];
                if (sum == target) {
                    res.add(Arrays.asList(nums[i], nums[left], nums[right]));

                    // Skip duplicates for left and right
                    while (left < right && nums[left] == nums[left + 1]) left++;
                    while (left < right && nums[right] == nums[right - 1]) right--;

                    left++;
                    right--;
                }
                else if (sum < target) {
                    left++;
                } else {
                    right--;
                }
            }
        }

        return res;
    }
}